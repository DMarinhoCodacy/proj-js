import { PluginContext } from './PluginContext';
import { PluginSpec, PluginWithEvents, PluginWithMethods } from './PluginSpec';
import { Callback } from './shared';
declare type PluginContextHandler<TSpec extends PluginSpec, TArgs extends any[], TReturn> = (context: PluginContext<TSpec>, ...args: TArgs) => TReturn;
declare type LoadHandlerReturn = void | null | Callback | (void | null | Callback)[];
export declare type PluginLoadHandler<T extends PluginSpec> = PluginContextHandler<T, [
], LoadHandlerReturn>;
export declare type PluginMethodHandlers<T extends PluginWithMethods> = {
    [MethodName in keyof T['methods']]: PluginContextHandler<T, Parameters<T['methods'][MethodName]>, ReturnType<T['methods'][MethodName]>>;
};
export declare type PluginEventHandler<T extends PluginSpec, Args extends any[]> = PluginContextHandler<T, Args, void>;
export declare type PluginEventHandlers<T extends PluginSpec, TEmitter extends PluginWithEvents> = {
    [EventName in keyof TEmitter['events']]?: PluginEventHandler<T, Parameters<TEmitter['events'][EventName]>>;
};
export {};
