"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.emitPluginStateChange = exports.emitPluginLoad = exports.onStateChange = exports.onPluginLoad = exports.updatePlugin = exports.addPlugin = exports.getPlugin = exports.getPlugins = exports.removeAllPlugins = void 0;
var plugins = {};
var loadHandlers = [];
var stateChangeHandlers = [];
function removeAllPlugins() {
    plugins = {};
    loadHandlers = [];
    stateChangeHandlers = [];
}
exports.removeAllPlugins = removeAllPlugins;
function getPlugins() {
    return plugins;
}
exports.getPlugins = getPlugins;
function getPlugin(pluginName) {
    if (!plugins[pluginName])
        throw new Error("Plugin doesn't exist: " + pluginName);
    return plugins[pluginName];
}
exports.getPlugin = getPlugin;
function addPlugin(plugin) {
    var _a;
    plugins = __assign(__assign({}, plugins), (_a = {}, _a[plugin.name] = plugin, _a));
}
exports.addPlugin = addPlugin;
function updatePlugin(pluginName, change) {
    var _a;
    var plugin = getPlugin(pluginName);
    plugins = __assign(__assign({}, plugins), (_a = {}, _a[pluginName] = change(plugin), _a));
}
exports.updatePlugin = updatePlugin;
function onPluginLoad(handler) {
    loadHandlers.push(handler);
    return function () { return removeHandler(loadHandlers, handler); };
}
exports.onPluginLoad = onPluginLoad;
function onStateChange(handler) {
    stateChangeHandlers.push(handler);
    return function () { return removeHandler(stateChangeHandlers, handler); };
}
exports.onStateChange = onStateChange;
function emitPluginLoad() {
    loadHandlers.forEach(function (handler) { return handler(getPlugins()); });
}
exports.emitPluginLoad = emitPluginLoad;
function emitPluginStateChange() {
    stateChangeHandlers.forEach(function (handler) { return handler(); });
}
exports.emitPluginStateChange = emitPluginStateChange;
function removeHandler(handlers, handler) {
    var index = handlers.indexOf(handler);
    if (index !== -1)
        handlers.splice(index, 1);
}
