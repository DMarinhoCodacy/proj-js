"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.getPluginContext = exports.resetPlugins = exports.reloadPlugins = exports.unloadPlugins = exports.loadPlugins = void 0;
var createPluginContext_1 = require("./createPluginContext");
var pluginStore_1 = require("./pluginStore");
var shared_1 = require("./shared");
var loadedArgs = {};
var sharedContext = null;
var unloadCallbacks = null;
function loadPlugins(args) {
    if (args === void 0) { args = {}; }
    var currentState = sharedContext ? sharedContext.state : {};
    unloadPlugins();
    loadedArgs = args;
    sharedContext = {
        config: createDefaultConfigs(args.config || {}),
        state: createInitialStates(args.state || {}, currentState),
        setState: function (pluginName, change, cb) {
            if (!sharedContext)
                throw new Error("Can't set state because plugins aren't loaded");
            sharedContext.state[pluginName] = shared_1.updateState(sharedContext.state[pluginName], change);
            if (cb)
                cb();
        }
    };
    unloadCallbacks = runLoadHandlers(sharedContext);
    pluginStore_1.emitPluginLoad();
}
exports.loadPlugins = loadPlugins;
function unloadPlugins() {
    if (unloadCallbacks) {
        unloadCallbacks.forEach(function (handler) { return handler(); });
        unloadCallbacks = null;
    }
    if (sharedContext)
        sharedContext = null;
}
exports.unloadPlugins = unloadPlugins;
function reloadPlugins() {
    if (sharedContext)
        loadPlugins(loadedArgs);
}
exports.reloadPlugins = reloadPlugins;
function resetPlugins() {
    unloadPlugins();
    pluginStore_1.removeAllPlugins();
}
exports.resetPlugins = resetPlugins;
function getPluginContext(pluginName) {
    if (!sharedContext)
        throw new Error("Can't get plugin context because plugins aren't loaded");
    return createPluginContext_1.createPluginContext(pluginName, sharedContext);
}
exports.getPluginContext = getPluginContext;
function createDefaultConfigs(configOverride) {
    var plugins = pluginStore_1.getPlugins();
    return Object.keys(plugins).reduce(function (configs, pluginName) {
        var _a;
        return (__assign(__assign({}, configs), (_a = {}, _a[pluginName] = __assign(__assign({}, plugins[pluginName].defaultConfig), configOverride[pluginName]), _a)));
    }, {});
}
function createInitialStates(stateOverride, currentState) {
    var plugins = pluginStore_1.getPlugins();
    return Object.keys(plugins).reduce(function (states, pluginName) {
        var _a;
        return (__assign(__assign({}, states), (_a = {}, _a[pluginName] = currentState[pluginName] !== undefined
            ? currentState[pluginName]
            : stateOverride[pluginName] !== undefined
                ? stateOverride[pluginName]
                : plugins[pluginName].initialState, _a)));
    }, {});
}
function runLoadHandlers(sharedCtx) {
    var plugins = pluginStore_1.getPlugins();
    var unloadCbs = [];
    Object.keys(plugins).forEach(function (pluginName) {
        var _a = plugins[pluginName], enabled = _a.enabled, loadHandlers = _a.loadHandlers;
        if (!enabled)
            return;
        loadHandlers.forEach(function (handler) {
            var handlerReturn = handler(createPluginContext_1.createPluginContext(pluginName, sharedCtx));
            if (handlerReturn) {
                var callbacks = Array.isArray(handlerReturn)
                    ? handlerReturn
                    : [handlerReturn];
                callbacks.forEach(function (callback) {
                    if (typeof callback === 'function')
                        unloadCbs.push(callback);
                });
            }
        });
    });
    return unloadCbs;
}
