'use strict';
exports.__esModule = true;
exports.PlugConnect = void 0;
var react_1 = require('react');
var ui_plugin_1 = require('ui-plugin');
function PlugConnect(_a) {
  var children = _a.children,
    component = _a.component,
    pluginName = _a.pluginName,
    slotProps = _a.slotProps;
  var _b = react_1.useState(
      // Avoid getting plugin context after initial PlugConnect state is created
      function () {
        return getPlugProps(pluginName, slotProps);
      },
    ),
    plugProps = _b[0],
    setPlugProps = _b[1];
  var updatePlugProps = react_1.useCallback(
    function () {
      // The plugin can be removed or disabled when this callback is called.
      var plugins = ui_plugin_1.getPlugins();
      if (plugins[pluginName] && plugins[pluginName].enabled)
        setPlugProps(getPlugProps(pluginName, slotProps));
    },
    [pluginName, slotProps],
  );
  react_1.useEffect(
    function () {
      // Plugin state might've changed since the component rendered
      updatePlugProps();
      return ui_plugin_1.onStateChange(updatePlugProps);
    },
    [updatePlugProps],
  );
  return react_1.createElement(component, plugProps, children);
}
exports.PlugConnect = PlugConnect;
function getPlugProps(pluginName, slotProps) {
  return {
    pluginContext: ui_plugin_1.getPluginContext(pluginName),
    slotProps: slotProps,
  };
}
