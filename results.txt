Clone found (tsx):
 - [1m[32mtest-imports/test2.tsx[39m[22m [16:3 - 89:18] (73 lines, 779 tokens)
   [1m[32mtest-imports/test2.tsx[39m[22m [7:3 - 17:14]

Clone found (tsx):
 - [1m[32mtest-imports/test.tsx[39m[22m [1:1 - 170:2] (169 lines, 1737 tokens)
   [1m[32mtest-imports/test2.tsx[39m[22m [1:1 - 170:2]

[32mJSON report saved to /tmp/13040670085858366844/jscpd-report.json[39m
[3m[90mDetection time:[39m[23m: 182.17ms
{"cloneLines":"}\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  componentDidMount","nrTokens":0,"nrLines":74,"files":[{"filePath":"test-imports/test2.tsx","startLine":16,"endLine":89},{"filePath":"test-imports/test2.tsx","startLine":7,"endLine":17}]}
{"cloneLines":"/// <reference path='../../typings/index.d.ts' />\ninterface Nothing {}\nclass CommentBox extends React.Component<{ url: string, pollInterval: number}, CommentData> {\n  constructor(){\n    super()\n    this.state = { data: [] };\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  fetchComments() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: (data) => this.setState({ data: data }),\n      error: (xhr, status, err) => console.error(status, err)\n    })\n  }\n  componentDidMount() {\n    this.fetchComments();\n    setInterval(this.fetchComments.bind(this), this.props.pollInterval);\n  }\n  render() {\n    let handleCommentSubmit = (comment: { author: string, text: string }) => {\n      console.warn('comment submitted!', comment);\n      const updated = this.state.data.slice(0);\n      updated.push(comment);\n      this.setState({ data: updated });\n    }\n    return (\n      <div className=\"commentBox\">\n        <h1>Comments</h1>\n        <CommentList data={this.state.data}/>\n        <CommentForm onCommentSubmit={handleCommentSubmit} />\n      </div>\n    );\n  }\n}\n\nclass CommentList extends React.Component<CommentData, Nothing> {\n  render() {\n    const nodes = this.props.data.map(comment => <Commentt author={comment.author}>{comment.text}</Commentt>)\n    return (\n      <div className=\"commentList\">\n        {nodes}\n      </div>\n    );\n  }\n};\n\nclass CommentForm extends React.Component<{ onCommentSubmit: (t: { author: string, text: string }) => void }, Nothing> {\n  render() {\n    let handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      const author = (this.refs['author'] as any as HTMLInputElement).value.trim();\n      const text = (this.refs['text'] as any as HTMLInputElement).value.trim();\n      if (author.length >0 && text.length > 0) {\n        this.props.onCommentSubmit({ author: author, text: text });\n      }\n    }\n\n    return (\n      <form className=\"commentForm\" onSubmit={handleSubmit}>\n        <input type=\"text\" placeholder=\"Your name\" ref=\"author\"/>\n        <input type=\"text\" placeholder=\"Say something...\" ref=\"text\" />\n        <input type=\"submit\" value=\"Post\" />\n      </form>\n    );\n  }\n};\n\ninterface CommentProps {\n  author: string;\n  children?: string;\n}\n\nclass Commentt extends React.Component<CommentProps, Nothing> {\n  render() {\n    return (\n      <div className=\"comment\">\n        <h2 className=\"commentAuthor\">\n          {this.props.author}\n        </h2>\n        {this.props.children}\n      </div>\n    );\n  }\n}\ninterface CommentDataItem {\n  author: string;\n  text: string;\n}\ninterface CommentData {\n  data: Array<CommentDataItem>;\n}\n\nReactDOM.render(\n  <CommentBox url=\"/public/js/comments.json\" pollInterval={5000}/>,\n  document.getElementById('content')\n);","nrTokens":0,"nrLines":170,"files":[{"filePath":"test-imports/test.tsx","startLine":1,"endLine":170},{"filePath":"test-imports/test2.tsx","startLine":1,"endLine":170}]}
